# Docker Compose configuration for Apache Airflow using a celery executor.
# Author: Andrew Jarombek
# Date: 11/6/2021

version: '3.8'

x-environment: &airflow_environment
  - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
  - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres/airflow
  - AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0
  - AIRFLOW__CORE__FERNET_KEY=''
  - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
  - AIRFLOW__CORE__LOAD_EXAMPLES=False
  - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
  - AIRFLOW__CORE__STORE_DAG_CODE=True
  - AIRFLOW__CORE__STORE_SERIALIZED_DAGS=True
  - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True

x-airflow-image: &airflow_image apache/airflow:2.2.0-python3.8

services:
  postgres:
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    networks:
      - airflow-net
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5

  redis:
    image: redis:latest
    expose:
      - 6379
    restart: always
    networks:
      - airflow-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50

  init:
    image: *airflow_image
    depends_on:
      - postgres
    environment: *airflow_environment
    networks:
      - airflow-net
    entrypoint: /bin/bash
    command: -c 'airflow db init && airflow users create --username admin --password admin --firstname Anonymous --lastname Admin --role Admin --email admin@example.org'

  webserver:
    image: *airflow_image
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      init:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    volumes:
      - logs:/opt/airflow/logs
    networks:
      - airflow-net
    environment: *airflow_environment
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  scheduler:
    image: *airflow_image
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      init:
        condition: service_completed_successfully
    volumes:
      - logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
    networks:
      - airflow-net
    environment: *airflow_environment
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5

  worker:
    image: *airflow_image
    restart: always
    command: celery worker
    healthcheck:
      test: ["CMD-SHELL", 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    environment: *airflow_environment
    networks:
      - airflow-net
    volumes:
      - logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      init:
        condition: service_completed_successfully

  triggerer:
    image: *airflow_image
    restart: always
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    environment: *airflow_environment
    networks:
      - airflow-net
    volumes:
      - logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      init:
        condition: service_completed_successfully

  flower:
    image: *airflow_image
    restart: always
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    environment: *airflow_environment
    networks:
      - airflow-net
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      init:
        condition: service_completed_successfully

volumes:
  logs:

networks:
  airflow-net:
    driver: bridge